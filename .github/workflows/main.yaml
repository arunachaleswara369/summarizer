name: Azure Workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-acr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Azure CLI
        uses: azure/setup-azure-cli@v1

      - name: Build and push image to Azure Container Registry (ACR)
        env:
          ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
          IMAGE_TAG: latest
        run: |
          # Log in to Azure Container Registry
          az acr login --name $ACR_LOGIN_SERVER --username $ACR_USERNAME --password $ACR_PASSWORD

          # Build your Docker container
          docker build -t $ACR_LOGIN_SERVER/my-function-app:$IMAGE_TAG .

          # Push the image to ACR
          docker push $ACR_LOGIN_SERVER/my-function-app:$IMAGE_TAG

          echo "::set-output name=image::$ACR_LOGIN_SERVER/my-function-app:$IMAGE_TAG"

  continuous-deployment:
    needs: build-and-push-acr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Azure CLI
        uses: azure/setup-azure-cli@v1

      - name: Pull latest images from ACR
        run: |
          docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}
          docker pull ${{ secrets.ACR_LOGIN_SERVER }}/my-function-app:latest

      # - name: Stop and remove container if running (if needed)
      #   run: |
      #     docker ps -q --filter "name=texts" | grep -q . && docker stop texts && docker rm -fv texts

      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 8080:8080 --name=texts -e 'AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}' -e 'AZURE_REGION=${{ secrets.AZURE_REGION }}' -e 'AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}' -e 'AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}' ${{ secrets.ACR_LOGIN_SERVER }}/my-function-app:latest

      - name: Clean previous images and containers (if needed)
        run: |
          docker system prune -f